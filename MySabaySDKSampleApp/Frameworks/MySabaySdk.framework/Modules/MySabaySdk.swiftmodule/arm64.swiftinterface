// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MySabaySdk
import CoreGraphics
import CoreTelephony
import Dispatch
import Foundation
@_exported import MySabaySdk
import StoreKit
import Swift
import UIKit
import WebKit
extension MetadataTerritory {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case codeID
    case countryCode
    case internationalPrefix
    case mainCountryForCode
    case nationalPrefix
    case nationalPrefixFormattingRule
    case nationalPrefixForParsing
    case nationalPrefixTransformRule
    case preferredExtnPrefix
    case emergency
    case fixedLine
    case generalDesc
    case mobile
    case pager
    case personalNumber
    case premiumRate
    case sharedCost
    case tollFree
    case voicemail
    case voip
    case uan
    case numberFormats
    case leadingDigits
    case availableFormats
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
}
extension MetadataPhoneNumberFormat {
  public enum CodingKeys : Swift.String, Swift.CodingKey {
    case pattern
    case format
    case intlFormat
    case leadingDigitsPatterns
    case nationalPrefixFormattingRule
    case nationalPrefixOptionalWhenFormatting
    case domesticCarrierCodeFormattingRule
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
    public var stringValue: Swift.String {
      get
    }
    public init?(stringValue: Swift.String)
    public var intValue: Swift.Int? {
      get
    }
    public init?(intValue: Swift.Int)
  }
  public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class MSBalance {
  public var coin: Swift.Double!
  public var gold: Swift.Double!
  @objc deinit
}
public protocol MSOtpFieldViewDelegate : AnyObject {
  func becomeFirstResponsorToFieldIndex(index: Swift.Int) -> Swift.Bool
  func hasFullfilledOtpCode(code: Swift.String)
  func hasEnteredAllOtpCode(all: Swift.Bool) -> Swift.Bool
}
public enum MsOtpDisplayType : Swift.Int {
  case circular
  case roundedCorner
  case square
  case diamond
  case underlinedBottom
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum MSOtpKeyboardType : Swift.Int {
  case numeric
  case alphabet
  case alphaNumeric
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class MSOtpFieldView : UIKit.UIView {
  weak public var delegate: MySabaySdk.MSOtpFieldViewDelegate?
  public var displayType: MySabaySdk.MsOtpDisplayType
  public var fieldsCount: Swift.Int
  public var otpInputType: MySabaySdk.MSOtpKeyboardType
  public var fieldFont: UIKit.UIFont
  public var fieldTextColor: UIKit.UIColor
  public var secureEntry: Swift.Bool
  public var hideEnteredText: Swift.Bool
  public var requireCursor: Swift.Bool
  public var cursorColor: UIKit.UIColor
  public var fieldSize: CoreGraphics.CGFloat
  public var separatorSpace: CoreGraphics.CGFloat
  public var fieldBorderWidth: CoreGraphics.CGFloat
  public var shouldAllowIntermediateEditing: Swift.Bool
  public var defaultBackgroundColor: UIKit.UIColor
  public var filledBackgroundColor: UIKit.UIColor
  public var defaultBorderColor: UIKit.UIColor
  public var filledBorderColor: UIKit.UIColor
  public var errorBorderColor: UIKit.UIColor?
  public var secureEntryData: [Swift.String]
  @objc override dynamic public func awakeFromNib()
  public func initializeUI()
  public func initializeOTPFields()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension MSOtpFieldView : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public protocol ExecutionContext {
  func execute(_ work: @escaping () -> Swift.Void)
}
extension DispatchQueue : MySabaySdk.ExecutionContext {
  public func execute(_ work: @escaping () -> Swift.Void)
}
final public class InvalidatableQueue : MySabaySdk.ExecutionContext {
  public init(queue: Dispatch.DispatchQueue = .main)
  final public func invalidate()
  final public func execute(_ work: @escaping () -> Swift.Void)
  @objc deinit
}
final public class MSPromise<Value> {
  public init()
  public init(value: Value)
  public init(error: Swift.Error)
  convenience public init(queue: Dispatch.DispatchQueue = DispatchQueue.global(qos: .userInitiated), work: @escaping (@escaping (Value) -> Swift.Void, @escaping (Swift.Error) -> Swift.Void) throws -> Swift.Void)
  @discardableResult
  final public func then<NewValue>(on queue: MySabaySdk.ExecutionContext = DispatchQueue.main, _ onFulfilled: @escaping (Value) throws -> MySabaySdk.MSPromise<NewValue>) -> MySabaySdk.MSPromise<NewValue>
  @discardableResult
  final public func then<NewValue>(on queue: MySabaySdk.ExecutionContext = DispatchQueue.main, _ onFulfilled: @escaping (Value) throws -> NewValue) -> MySabaySdk.MSPromise<NewValue>
  @discardableResult
  final public func then(on queue: MySabaySdk.ExecutionContext = DispatchQueue.main, _ onFulfilled: @escaping (Value) -> Swift.Void, _ onRejected: @escaping (Swift.Error) -> Swift.Void = { _ in }) -> MySabaySdk.MSPromise<Value>
  @discardableResult
  final public func `catch`(on queue: MySabaySdk.ExecutionContext = DispatchQueue.main, _ onRejected: @escaping (Swift.Error) -> Swift.Void) -> MySabaySdk.MSPromise<Value>
  final public func reject(_ error: Swift.Error)
  final public func fulfill(_ value: Value)
  final public var isPending: Swift.Bool {
    get
  }
  final public var isFulfilled: Swift.Bool {
    get
  }
  final public var isRejected: Swift.Bool {
    get
  }
  final public var value: Value? {
    get
  }
  final public var error: Swift.Error? {
    get
  }
  @objc deinit
}
extension PhoneNumber {
  public func adjustedNationalNumber() -> Swift.String
}
public enum MSError : Swift.Error {
  case badRequest
  case unauthorized
  case forbidden
  case notFound
  case methodNotAllowed
  case internalServer
  case unKnown
  case iapReceiptNotFound
  case iapReceiptInvalid
  case iapProductNotFound
  case iapNotAllowToPurchase
  case iapUnknown
  case iapClientInvalid
  case iapPaymentCancelled
  case iapPaymentInvalid
  case iapPaymentNotAllowed
  case iapPurchaseFailed
  case msPurchaseFailed
  public static func == (a: MySabaySdk.MSError, b: MySabaySdk.MSError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension MSError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum MSAppTheme {
  case dark
  case light
  public static func == (a: MySabaySdk.MSAppTheme, b: MySabaySdk.MSAppTheme) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct PhoneNumber : Swift.Codable {
  public let numberString: Swift.String
  public let countryCode: Swift.UInt64
  public let leadingZero: Swift.Bool
  public let nationalNumber: Swift.UInt64
  public let numberExtension: Swift.String?
  public let type: MySabaySdk.PhoneNumberType
  public let regionID: Swift.String?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension PhoneNumber : Swift.Equatable {
  public static func == (lhs: MySabaySdk.PhoneNumber, rhs: MySabaySdk.PhoneNumber) -> Swift.Bool
}
extension PhoneNumber : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PhoneNumber {
  public static func notPhoneNumber() -> MySabaySdk.PhoneNumber
  public func notParsed() -> Swift.Bool
}
extension PhoneNumber {
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String) throws
  @available(*, unavailable, message: "use PhoneNumberKit instead to produce PhoneNumbers")
  public init(rawNumber: Swift.String, region: Swift.String) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class MSMySabaySDK : ObjectiveC.NSObject {
  public static let shared: MySabaySdk.MSMySabaySDK
  public static func configure(configure: MySabaySdk.MSConfigure = MSConfigure())
  public func addTransactionObserver()
  public func removeTransactionObserver()
  public func logIn(loginHandler: ((MySabaySdk.MSLoginResult) -> Swift.Void)?)
  public func openStore(storeHandler: ((MySabaySdk.MSStoreResult) -> Swift.Void)?)
  public func getUserProfile() -> MySabaySdk.MSPromise<MySabaySdk.MSUserProfile>
  public func verifyToken() -> MySabaySdk.MSPromise<Swift.Bool>
  public func refreshTokens() -> MySabaySdk.MSPromise<(MySabaySdk.MSRefreshToken, MySabaySdk.MSAccessToken)>
  public func logout(all: Swift.Bool = false) -> MySabaySdk.MSPromise<Swift.String>
  @discardableResult
  public func handleOpenUrl(url: Foundation.URL) -> Swift.Bool
  @available(iOS 13.0, *)
  public func handleOpenUrl(contexts: Swift.Set<UIKit.UIOpenURLContext>)
  @objc deinit
}
extension MSMySabaySDK : StoreKit.SKPaymentTransactionObserver {
  @objc dynamic public func paymentQueue(_ queue: StoreKit.SKPaymentQueue, updatedTransactions transactions: [StoreKit.SKPaymentTransaction])
}
extension MSMySabaySDK : StoreKit.SKProductsRequestDelegate {
  @objc dynamic public func productsRequest(_ request: StoreKit.SKProductsRequest, didReceive response: StoreKit.SKProductsResponse)
  @objc dynamic public func request(_ request: StoreKit.SKRequest, didFailWithError error: Swift.Error)
}
@objc open class PhoneNumberFormatter : Foundation.Formatter {
  final public let phoneNumberKit: MySabaySdk.PhoneNumberKit
  @objc dynamic public var generatesPhoneNumber: Swift.Bool
  @objc dynamic public var defaultRegion: Swift.String {
    @objc get
    @objc set
  }
  @objc dynamic public var withPrefix: Swift.Bool {
    @objc get
    @objc set
  }
  @objc dynamic public var currentRegion: Swift.String {
    @objc get
  }
  public init(phoneNumberKit pnk: MySabaySdk.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  @objc override dynamic public init()
}
extension PhoneNumberFormatter {
  @objc override dynamic open func string(for obj: Any?) -> Swift.String?
  @objc override dynamic open func getObjectValue(_ obj: Swift.AutoreleasingUnsafeMutablePointer<Swift.AnyObject?>?, for string: Swift.String, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc override dynamic open func isPartialStringValid(_ partialStringPtr: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString>, proposedSelectedRange proposedSelRangePtr: Foundation.NSRangePointer?, originalString origString: Swift.String, originalSelectedRange origSelRange: Foundation.NSRange, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
}
public struct MetadataTerritory : Swift.Decodable {
  public let codeID: Swift.String
  public let countryCode: Swift.UInt64
  public let internationalPrefix: Swift.String?
  public let mainCountryForCode: Swift.Bool
  public let nationalPrefix: Swift.String?
  public let nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixForParsing: Swift.String?
  public let nationalPrefixTransformRule: Swift.String?
  public let preferredExtnPrefix: Swift.String?
  public let emergency: MySabaySdk.MetadataPhoneNumberDesc?
  public let fixedLine: MySabaySdk.MetadataPhoneNumberDesc?
  public let generalDesc: MySabaySdk.MetadataPhoneNumberDesc?
  public let mobile: MySabaySdk.MetadataPhoneNumberDesc?
  public let pager: MySabaySdk.MetadataPhoneNumberDesc?
  public let personalNumber: MySabaySdk.MetadataPhoneNumberDesc?
  public let premiumRate: MySabaySdk.MetadataPhoneNumberDesc?
  public let sharedCost: MySabaySdk.MetadataPhoneNumberDesc?
  public let tollFree: MySabaySdk.MetadataPhoneNumberDesc?
  public let voicemail: MySabaySdk.MetadataPhoneNumberDesc?
  public let voip: MySabaySdk.MetadataPhoneNumberDesc?
  public let uan: MySabaySdk.MetadataPhoneNumberDesc?
  public let numberFormats: [MySabaySdk.MetadataPhoneNumberFormat]
  public let leadingDigits: Swift.String?
}
public struct MetadataPhoneNumberDesc : Swift.Decodable {
  public let exampleNumber: Swift.String?
  public let nationalNumberPattern: Swift.String?
  public let possibleNumberPattern: Swift.String?
  public let possibleLengths: MySabaySdk.MetadataPossibleLengths?
  public init(from decoder: Swift.Decoder) throws
}
public struct MetadataPossibleLengths : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public struct MetadataPhoneNumberFormat : Swift.Decodable {
  public let pattern: Swift.String?
  public let format: Swift.String?
  public let intlFormat: Swift.String?
  public let leadingDigitsPatterns: [Swift.String]?
  public var nationalPrefixFormattingRule: Swift.String?
  public let nationalPrefixOptionalWhenFormatting: Swift.Bool?
  public let domesticCarrierCodeFormattingRule: Swift.String?
}
public enum MSLoginResult {
  case loginSuccess(MySabaySdk.MSRefreshToken, MySabaySdk.MSAccessToken)
  case loginFailed(Swift.Error)
}
@objc @_hasMissingDesignatedInitializers public class MSRefreshToken : ObjectiveC.NSObject {
  public static var isValid: Swift.Bool {
    get
  }
  public static var currentToken: MySabaySdk.MSRefreshToken? {
    get
  }
  public var tokenString: Swift.String!
  @objc override dynamic public init()
  @objc deinit
}
public enum MSStoreResult {
  case purchaseApple(StoreKit.SKProduct, Swift.String)
  case purchaseMySabay(MySabaySdk.MSPurchase)
  case purchaseFailed(Swift.Error)
}
@objc @_hasMissingDesignatedInitializers public class MSAccessToken : ObjectiveC.NSObject {
  public static var isValid: Swift.Bool {
    get
  }
  public static var currentToken: MySabaySdk.MSAccessToken? {
    get
  }
  public var tokenString: Swift.String!
  public var expirationTime: Swift.Int64!
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MSUserProfile {
  public var uuid: Swift.String!
  public var serviceId: Swift.Int64!
  public var mySabayUserId: Swift.Int64!
  public var serviceUserId: Swift.String!
  public var lastLogin: Swift.String!
  public var enableLocalPay: Swift.Bool!
  public var status: Swift.Int64!
  public var createdAt: Swift.String!
  public var updatedAt: Swift.String!
  public var balance: MySabaySdk.MSBalance!
  @objc deinit
}
public enum MSRefreshTokenResult {
  case refreshSuccess(MySabaySdk.MSRefreshToken, MySabaySdk.MSAccessToken)
  case refreshFailed(Swift.Error)
}
public struct MSConfigure {
  public var appTheme: MySabaySdk.MSAppTheme!
  public var sandBox: Swift.Bool!
  public var appearence: MySabaySdk.MSAppearence!
  public var appThemeColor: UIKit.UIColor {
    get
  }
  public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class MSOtpField : UIKit.UITextField {
  public var otpBorderColor: UIKit.UIColor
  public var otpBorderWidth: CoreGraphics.CGFloat
  public var shapeLayer: QuartzCore.CAShapeLayer!
  @objc override dynamic public func awakeFromNib()
  public func initalizeUI(forFieldType type: MySabaySdk.MsOtpDisplayType)
  @objc override dynamic public func deleteBackward()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class PartialFormatter {
  convenience public init(phoneNumberKit: MySabaySdk.PhoneNumberKit = PhoneNumberKit(), defaultRegion: Swift.String = PhoneNumberKit.defaultRegionCode(), withPrefix: Swift.Bool = true, maxDigits: Swift.Int? = nil)
  final public var defaultRegion: Swift.String {
    get
    set
  }
  final public var maxDigits: Swift.Int?
  final public var currentRegion: Swift.String {
    get
  }
  final public func nationalNumber(from rawNumber: Swift.String) -> Swift.String
  final public func formatPartial(_ rawNumber: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MSPurchase {
  public var hash: Swift.String!
  public var packageId: Swift.String!
  public var bonus: Swift.String!
  public var amount: Swift.Double!
  public var assetCode: Swift.String!
  public var authorization: Swift.String!
  @objc deinit
}
public struct MSTheme {
  public var darkColor: UIKit.UIColor
  public var lightColor: UIKit.UIColor
  public init()
}
public struct MSAppearence {
  public var title: Swift.String!
  public var theme: MySabaySdk.MSTheme!
  public var primaryColor: UIKit.UIColor!
  public var secondaryColor: UIKit.UIColor!
  public init()
}
@objc @_hasMissingDesignatedInitializers @available(iOS 11.0, *)
public class CountryCodePickerViewController : UIKit.UITableViewController {
  final public let phoneNumberKit: MySabaySdk.PhoneNumberKit
  public init(phoneNumberKit: MySabaySdk.PhoneNumberKit, commonCountryCodes: [Swift.String] = PhoneNumberKit.CountryCodePicker.commonCountryCodes)
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc override dynamic public func sectionIndexTitles(for tableView: UIKit.UITableView) -> [Swift.String]?
  @objc override dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@available(iOS 11.0, *)
extension CountryCodePickerViewController : UIKit.UISearchResultsUpdating {
  @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
public enum PhoneNumberError : Swift.Error {
  case generalError
  case invalidCountryCode
  case notANumber
  case unknownType
  case tooLong
  case tooShort
  case deprecated
  case metadataNotFound
  public static func == (a: MySabaySdk.PhoneNumberError, b: MySabaySdk.PhoneNumberError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension PhoneNumberError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum PhoneNumberFormat {
  case e164
  case international
  case national
  public static func == (a: MySabaySdk.PhoneNumberFormat, b: MySabaySdk.PhoneNumberFormat) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum PhoneNumberType : Swift.String, Swift.Codable {
  case fixedLine
  case mobile
  case fixedOrMobile
  case pager
  case personalNumber
  case premiumRate
  case sharedCost
  case tollFree
  case voicemail
  case voip
  case uan
  case unknown
  case notParsed
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum PossibleLengthType : Swift.String, Swift.Codable {
  case national
  case localOnly
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class PhoneNumberTextField : UIKit.UITextField, UIKit.UITextFieldDelegate {
  final public let phoneNumberKit: MySabaySdk.PhoneNumberKit
  public var flagButton: UIKit.UIButton {
    get
    set
  }
  @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  open func setTextUnformatted(newValue: Swift.String?)
  open var defaultRegion: Swift.String {
    get
    @available(*, deprecated, message: "    The setter of defaultRegion is deprecated,\n    please override defaultRegion in a subclass instead.")
    set
  }
  public var withPrefix: Swift.Bool {
    get
    set
  }
  public var withFlag: Swift.Bool {
    get
    set
  }
  public var withExamplePlaceholder: Swift.Bool {
    get
    set
  }
  public var countryCodePlaceholderColor: UIKit.UIColor {
    get
    set
  }
  public var numberPlaceholderColor: UIKit.UIColor {
    get
    set
  }
  @available(iOS 11.0, *)
  public var withDefaultPickerUI: Swift.Bool {
    get
    set
  }
  public var isPartialFormatterEnabled: Swift.Bool
  public var maxDigits: Swift.Int? {
    get
    set
  }
  public var partialFormatter: MySabaySdk.PartialFormatter {
    get
  }
  @objc override dynamic open var delegate: UIKit.UITextFieldDelegate? {
    @objc get
    @objc set
  }
  public var currentRegion: Swift.String {
    get
  }
  public var nationalNumber: Swift.String {
    get
  }
  public var isValidNumber: Swift.Bool {
    get
  }
  public var phoneNumber: MySabaySdk.PhoneNumber? {
    get
  }
  @objc override dynamic open func layoutSubviews()
  convenience public init(withPhoneNumberKit phoneNumberKit: MySabaySdk.PhoneNumberKit)
  public init(frame: CoreGraphics.CGRect, phoneNumberKit: MySabaySdk.PhoneNumberKit)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init(coder aDecoder: Foundation.NSCoder)
  open func updateFlag()
  open func updatePlaceholder()
  @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc open func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc open func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc open func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc open func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
}
public typealias MetadataCallback = (() throws -> Foundation.Data?)
@objc final public class PhoneNumberKit : ObjectiveC.NSObject {
  public init(metadataCallback: @escaping MySabaySdk.MetadataCallback = PhoneNumberKit.defaultMetadataCallback)
  final public func parse(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) throws -> MySabaySdk.PhoneNumber
  final public func parse(_ numberStrings: [Swift.String], withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false, shouldReturnFailedEmptyNumbers: Swift.Bool = false) -> [MySabaySdk.PhoneNumber]
  final public func isValidPhoneNumber(_ numberString: Swift.String, withRegion region: Swift.String = PhoneNumberKit.defaultRegionCode(), ignoreType: Swift.Bool = false) -> Swift.Bool
  final public func format(_ phoneNumber: MySabaySdk.PhoneNumber, toType formatType: MySabaySdk.PhoneNumberFormat, withPrefix prefix: Swift.Bool = true) -> Swift.String
  final public func allCountries() -> [Swift.String]
  final public func countries(withCode countryCode: Swift.UInt64) -> [Swift.String]?
  final public func mainCountry(forCode countryCode: Swift.UInt64) -> Swift.String?
  final public func countryCode(for country: Swift.String) -> Swift.UInt64?
  final public func leadingDigits(for country: Swift.String) -> Swift.String?
  final public func getRegionCode(of phoneNumber: MySabaySdk.PhoneNumber) -> Swift.String?
  final public func getExampleNumber(forCountry countryCode: Swift.String, ofType type: MySabaySdk.PhoneNumberType = .mobile) -> MySabaySdk.PhoneNumber?
  final public func getFormattedExampleNumber(forCountry countryCode: Swift.String, ofType type: MySabaySdk.PhoneNumberType = .mobile, withFormat format: MySabaySdk.PhoneNumberFormat = .international, withPrefix prefix: Swift.Bool = true) -> Swift.String?
  final public func metadata(for country: Swift.String) -> MySabaySdk.MetadataTerritory?
  final public func metadata(forCode countryCode: Swift.UInt64) -> [MySabaySdk.MetadataTerritory]?
  final public func possiblePhoneNumberLengths(forCountry country: Swift.String, phoneNumberType: MySabaySdk.PhoneNumberType, lengthType: MySabaySdk.PossibleLengthType) -> [Swift.Int]
  final public class func defaultRegionCode() -> Swift.String
  public static func defaultMetadataCallback() throws -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
extension PhoneNumberKit {
  public enum CountryCodePicker {
    public static var commonCountryCodes: [Swift.String]
    public static var forceModalPresentation: Swift.Bool
  }
}
extension MySabaySdk.MetadataTerritory.CodingKeys : Swift.Equatable {}
extension MySabaySdk.MetadataTerritory.CodingKeys : Swift.Hashable {}
extension MySabaySdk.MetadataTerritory.CodingKeys : Swift.RawRepresentable {}
extension MySabaySdk.MetadataPhoneNumberFormat.CodingKeys : Swift.Equatable {}
extension MySabaySdk.MetadataPhoneNumberFormat.CodingKeys : Swift.Hashable {}
extension MySabaySdk.MetadataPhoneNumberFormat.CodingKeys : Swift.RawRepresentable {}
extension MySabaySdk.MsOtpDisplayType : Swift.Equatable {}
extension MySabaySdk.MsOtpDisplayType : Swift.Hashable {}
extension MySabaySdk.MsOtpDisplayType : Swift.RawRepresentable {}
extension MySabaySdk.MSOtpKeyboardType : Swift.Equatable {}
extension MySabaySdk.MSOtpKeyboardType : Swift.Hashable {}
extension MySabaySdk.MSOtpKeyboardType : Swift.RawRepresentable {}
extension MySabaySdk.MSError : Swift.Equatable {}
extension MySabaySdk.MSError : Swift.Hashable {}
extension MySabaySdk.MSAppTheme : Swift.Equatable {}
extension MySabaySdk.MSAppTheme : Swift.Hashable {}
extension MySabaySdk.PhoneNumberError : Swift.Equatable {}
extension MySabaySdk.PhoneNumberError : Swift.Hashable {}
extension MySabaySdk.PhoneNumberFormat : Swift.Equatable {}
extension MySabaySdk.PhoneNumberFormat : Swift.Hashable {}
extension MySabaySdk.PhoneNumberType : Swift.Equatable {}
extension MySabaySdk.PhoneNumberType : Swift.Hashable {}
extension MySabaySdk.PhoneNumberType : Swift.RawRepresentable {}
extension MySabaySdk.PossibleLengthType : Swift.Equatable {}
extension MySabaySdk.PossibleLengthType : Swift.Hashable {}
extension MySabaySdk.PossibleLengthType : Swift.RawRepresentable {}
